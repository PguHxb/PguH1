
块级作用域：

	JavaScript是没有块级作用域的概念的，这意味着在块语句中定义的变量，实际上是包含函数中而非语句中创建的。
	function outputNumber(count){
		for(var i=0 ;i<count ;i++){
		alert(i);
		}
		alert(i);//计数
	}
	在这里的循环中，变量I的初始值是设置的为0，在java和c语言中，变量i只在循环语句中定义，而循环一旦结束，变量I是会被销毁的。而JavaScript，变量I是定义在函数的活动对象中，因此，从他定义的哪一刻开始，后就可以在函数内部去访问变量i，即使向下面一样错误的重新声明一个变量，也是不会改变他的值的。
	function outputNumber(count){
		for(var i=0; i<count; i++){
			alert(i);
		}
		var i;重新声明的变量
		alert(i)
	}

	那么在JavaScript中的做法就是，他是不会告诉你多次声明了一个变量，他会对后续的声明的变量视而不见（但是，他会在执行后续声明中的变量进行初始化）。
	其中，JavaScript中的匿名函数就是可以用来模拟块级作用域来避免这个问题。
	如下例：
	(function(){
		//这里是块级作用域
	})();


	function outputNumber(count){
		(function(){
			for(var i =0;i<count;i++){
				alert(i);
			}
		})()
		alert(i);//这样会导致一种错误。
	}
	对上面代码的解释：
		如上，我们为for循环中给了一个私有作用域，在匿名函数中定义的任何变量，都会在执行结束的时候被销毁，因此，变量i只能在循环中使用，然后被销毁。
		然后，私有作用域中是能够访问变量count的，因为匿名函数是一个闭包，他是能够访问包含作用域的所有变量的。

		那么上面的代码书写有什么好处呢和主要应用于哪方面?
		应用：在全局作用域中被用在函数外部，从而限制向全局作用域添加过多的变量和函数，一般来说，我们都应该尽量减少的向全局作用域中添加变量和函数。
		好处：在大的应用程序中，使用块级作用域可以避免过多的全局变量和函数导致的命名冲突，通过创建私有作用域，每个开发人员都是可以有自己的命名空间，有不必当心扰乱全局作用域。


私有变量：
	严格的来说，JavaScript是没有私有成员的概念这一说，所有的对象属性是公有的。但是却有私有变量的概念。任何函数定义的变量都可以被认为是私有变量。因为是不能在函数外部访问这些变量，私有变量包括函数的参数，局部变量和函数内部定义的其他函数。

	function add(num1,num2){
		var sum=sum1+sum2;
		return;
	}

	在这个函数内部中，有三个私有变量，num1,num2和sum，再函数的内部是可以访问这几个变量的，但是在函数外是不能访问他们的。如果利用这个函数内部创建一个闭包，那么闭包是可以通过自己作用链也可访问这些变量，而利用这一点，我们是可以创建用于访问私有变量的公有方法。我们将有权访问私有变量和私有方法的公有方法称之为特权方法，有两种在对象创建特权方式，第一种就是在构造函数中定义特权方法。如下：
	function myobject(){
		//私有变量和私有函数
		var privateVariable = 10;
		function privateFunction(){
			return false;
		}

		//特权方法在构造函数中定义
		this.publicMethod = function(){
			privateVariable++;
			return privateFunction();
		}
	}
	以上在构造函数内部定义了所有的私有变量和函数，然后，有继续创建了能够访问这些私有成员的特权方法，能够在构造函数中定义这些特权方法，是因为这些特权方法作为闭包有权访问在构造函数中定义的所有变量和函数，对于上述例子，var privateVariable，privateFunction()只能通过特权方法publicMethod（）来访问，在创建myobject的实例后，除了使用publicMethod（）这一途径外，是没有任何方法进行直接访问privateVariiable和函数privateMethod().



静态私有变量：
	

